#!/bin/bash

# Frontier LLM Stack Selection Script
# This script allows users to select between different inference engine stacks

set -e

# Check if docker-compose is available
if ! command -v docker-compose &> /dev/null; then
    echo "Error: docker-compose is not installed or not in PATH"
    echo "Please install docker-compose to continue"
    exit 1
fi

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
STACKS_DIR="${SCRIPT_DIR}/stacks"
CURRENT_STACK_FILE="${SCRIPT_DIR}/.current-stack"

# Function to print colored messages
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to list available stacks
list_stacks() {
    print_info "Available stacks:"
    for stack in "${STACKS_DIR}"/*; do
        if [[ -d "$stack" && "$stack" != */common ]]; then
            stack_name=$(basename "$stack")
            if [[ -f "$CURRENT_STACK_FILE" ]] && [[ "$(cat "$CURRENT_STACK_FILE")" == "$stack_name" ]]; then
                echo -e "  - ${GREEN}${stack_name}${NC} (current)"
            else
                echo "  - $stack_name"
            fi
        fi
    done
}

# Function to get current stack
get_current_stack() {
    if [[ -f "$CURRENT_STACK_FILE" ]]; then
        cat "$CURRENT_STACK_FILE"
    else
        echo ""
    fi
}

# Function to select a stack
select_stack() {
    local stack_name=$1
    local stack_dir="${STACKS_DIR}/${stack_name}"
    
    # Validate stack exists
    if [[ ! -d "$stack_dir" ]]; then
        print_error "Stack '${stack_name}' does not exist"
        list_stacks
        exit 1
    fi
    
    # Validate stack has docker-compose.yml
    if [[ ! -f "${stack_dir}/docker-compose.yml" ]]; then
        print_error "Stack '${stack_name}' is missing docker-compose.yml"
        exit 1
    fi
    
    print_info "Selecting stack: ${stack_name}"
    
    # Save current stack
    echo "$stack_name" > "$CURRENT_STACK_FILE"
    
    # Create a stub docker-compose.yml
    cat > "${SCRIPT_DIR}/docker-compose.yml" << 'EOF'
version: '3.8'

# Auto-generated docker-compose.yml - DO NOT EDIT
# Generated by stack-select.sh
# 
# This file is a stub. The actual configuration is managed by:
# - ./stack-select.sh (to select the active stack)
# - ./docker-compose-wrapper.sh (to run docker-compose with the correct files)
# - ./start.sh and ./stop.sh (convenience scripts)
#
# The wrapper script automatically includes:
# - stacks/common/base/docker-compose.yml
# - stacks/<selected-stack>/docker-compose.yml
# - stacks/common/monitoring/docker-compose.yml  
# - stacks/common/nginx/docker-compose.yml
#
# To manage services, use:
# ./start.sh              # Start all services
# ./stop.sh               # Stop all services
# ./docker-compose-wrapper.sh ps   # Check status
# ./docker-compose-wrapper.sh logs  # View logs
EOF

    # Ensure docker-compose-wrapper.sh has execute permissions
    if [[ -f "${SCRIPT_DIR}/docker-compose-wrapper.sh" ]]; then
        chmod +x "${SCRIPT_DIR}/docker-compose-wrapper.sh"
    else
        print_error "docker-compose-wrapper.sh not found!"
        exit 1
    fi
    
    # Copy stack-specific .env.example if it doesn't exist as .env
    if [[ -f "${stack_dir}/.env.example" ]] && [[ ! -f "${SCRIPT_DIR}/.env" ]]; then
        print_info "Creating .env from ${stack_name}/.env.example"
        cat "${stack_dir}/.env.example" > "${SCRIPT_DIR}/.env"
        
        # Append common env variables if they exist
        if [[ -f "${STACKS_DIR}/common/.env.example" ]]; then
            echo "" >> "${SCRIPT_DIR}/.env"
            echo "# Common Configuration" >> "${SCRIPT_DIR}/.env"
            cat "${STACKS_DIR}/common/.env.example" >> "${SCRIPT_DIR}/.env"
        fi
        
        print_warning "Please review and update .env with your specific configuration"
    fi
    
    print_success "Stack '${stack_name}' selected successfully!"
    print_info "You can now use docker-compose commands as usual"
    print_info "Example: docker-compose up -d"
}

# Function to show usage
usage() {
    cat << EOF
Usage: $0 [COMMAND] [OPTIONS]

Commands:
    list                List all available stacks
    select <stack>      Select and activate a specific stack
    current             Show the currently selected stack
    help                Show this help message

Examples:
    $0 list             # List all available stacks
    $0 select ollama    # Select the Ollama stack
    $0 current          # Show current stack

EOF
}

# Main script logic
case "${1:-help}" in
    list)
        list_stacks
        ;;
    select)
        if [[ -z "$2" ]]; then
            print_error "Stack name required"
            usage
            exit 1
        fi
        select_stack "$2"
        ;;
    current)
        current=$(get_current_stack)
        if [[ -n "$current" ]]; then
            print_info "Current stack: ${current}"
        else
            print_warning "No stack currently selected"
            print_info "Use '$0 select <stack>' to select a stack"
        fi
        ;;
    help|--help|-h)
        usage
        ;;
    *)
        print_error "Unknown command: $1"
        usage
        exit 1
        ;;
esac