version: '3.8'

services:
  # Ollama LLM Server
  ollama:
    image: ollama/ollama:latest
    container_name: frontier-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama-models:/root/.ollama
      - ./config/ollama:/config
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_KEEP_ALIVE=10m
      - OLLAMA_NUM_PARALLEL=4
      - OLLAMA_MAX_LOADED_MODELS=2
      - OLLAMA_FLASH_ATTENTION=true
    deploy:
      resources:
        limits:
          memory: 64G
        reservations:
          memory: 32G
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: frontier-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      - ollama
      - node-exporter

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: frontier-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=frontier-llm
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    depends_on:
      - prometheus

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: frontier-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

  # NVIDIA GPU Exporter (optional, for GPU metrics)
  nvidia-exporter:
    image: nvidia/dcgm-exporter:latest
    container_name: frontier-nvidia-exporter
    restart: unless-stopped
    ports:
      - "9400:9400"
    environment:
      - DCGM_EXPORTER_NO_HOSTNAME=1
    cap_add:
      - SYS_ADMIN
    devices:
      - /dev/nvidiactl
      - /dev/nvidia0
    profiles:
      - gpu

  # Nginx reverse proxy for security
  nginx:
    image: nginx:alpine
    container_name: frontier-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx:/etc/nginx/conf.d
      - ./config/ssl:/etc/nginx/ssl
    depends_on:
      - ollama
      - grafana
      - prometheus

  # Aider development environment (optional)
  aider:
    build:
      context: ./docker/aider
      dockerfile: Dockerfile
    container_name: frontier-aider
    restart: unless-stopped
    volumes:
      - ~/code:/workspace
      - ./config/aider:/root/.config/aider
    environment:
      - OLLAMA_API_BASE=http://ollama:11434
    stdin_open: true
    tty: true
    profiles:
      - development

volumes:
  ollama-models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${OLLAMA_MODELS_PATH:-./data/ollama-models}
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  default:
    name: frontier-llm-network
    driver: bridge